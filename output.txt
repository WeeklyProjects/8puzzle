Henry Odza
Using Command: // Begin HW1 Tests
Comment: // Begin HW1 Tests

Using Command: setState 0 1 2 3 4 5 6 7 8
Setting Puzzle State...
New Puzzle State:
0 1 2
3 4 5
6 7 8

Using Command: printState
Current Puzzle State:
0 1 2
3 4 5
6 7 8

Using Command: move down
Moving Down...
New Puzzle State:
3 1 2
6 4 5
0 7 8

Using Command: move right
Moving Right...
New Puzzle State:
3 1 2
6 4 5
7 8 0

Using Command: move down
Moving Down...
New Puzzle State:
3 1 2
6 4 5
7 8 0

Using Command: move left
Moving Left...
New Puzzle State:
3 1 2
6 4 5
0 7 8

Using Command: move up
Moving Up...
New Puzzle State:
0 1 2
3 4 5
6 7 8

Using Command: move right
Moving Right...
New Puzzle State:
1 2 0
3 4 5
6 7 8

Using Command: move pizza
Error: Invalid Move: move pizza

Using Command: move
Error: Invalid Move: move

Using Command: scrambleState 8
Scrambling...
0 1 2
3 4 5
6 7 8
Moving Right...
Moving Down...
Moving Left...
Moving Down...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
New Puzzle State:
1 4 2
6 3 5
0 7 8

Using Command: # This is a comment
Comment: # This is a comment

Using Command: // This is also a comment
Comment: // This is also a comment

Using Command: This is an invalid statement
Error: Invalid Command This is an invalid statement

Using Command: setState up
Error Invalid Puzzle State: Please enter a puzzle with 9 unique digits between 0 and 9 sperated by spaces

Using Command: scrambleState down
Error: Invalid Scramble Value, please enter "scrambleValue n" where n is an integer: scrambleState down

Using Command: scrambleState 8.2
Error: Invalid Scramble Value, please enter "scrambleValue n" where n is an integer: scrambleState 8.2

Using Command: setState 1 2 3 4 5 6 7 8 9
Error Invalid Puzzle State: Please enter a puzzle with 9 unique digits between 0 and 9 sperated by spaces

Using Command: setState 0 0 1 2 3 4 5 6 7
Error Invalid Puzzle State: Please enter a puzzle with 9 unique digits between 0 and 9 sperated by spaces

Using Command: setState 0 0 1 2 3 4 5 6 7 8
Error Invalid Puzzle State: Please enter a puzzle with 9 unique digits between 0 and 9 sperated by spaces

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // -------------------------------------------------------------------------------------------------------------------------------------------
Comment: // -------------------------------------------------------------------------------------------------------------------------------------------

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Begin HW2 Tests
Comment: // Begin HW2 Tests

Using Command: // Sets puzzle to a solvable state
Comment: // Sets puzzle to a solvable state

Using Command: scrambleState 8
Scrambling...
0 1 2
3 4 5
6 7 8
Moving Right...
Moving Right...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Down...
Moving Up...
New Puzzle State:
1 4 2
3 0 5
6 7 8

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Tests the functionality of BFS
Comment: // Tests the functionality of BFS

Using Command: solve BFS
Solving using BFS...
Nodes expanded: 33
Solution Length: 2
Move Sequence:
Move Up
Move Left

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Shows what happens when it hits maxnodes and tests to see if maxnodes is passed in
Comment: // Shows what happens when it hits maxnodes and tests to see if maxnodes is passed in

Using Command: solve BFS 2
Solving using BFS...
Error: Max Nodes limit(2) Reached

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Shows what happens when an invalid number is passed for maxnodes
Comment: // Shows what happens when an invalid number is passed for maxnodes

Using Command: solve BFS DFS
Error: Invalid Max Nodes Value. Using Default Value of 1000
Solving using BFS...
Nodes expanded: 33
Solution Length: 2
Move Sequence:
Move Up
Move Left

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Shows what happens when only solve with no algorithm is passed
Comment: // Shows what happens when only solve with no algorithm is passed

Using Command: solve
Error: Invalid Solve Command: solve

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Shows what happens when fake algorithm is passed
Comment: // Shows what happens when fake algorithm is passed

Using Command: solve ABC
Error: Invalid Solve Command: solve ABC

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Tests functionality of DFS with a state it can't solve
Comment: // Tests functionality of DFS with a state it can't solve

Using Command: solve DFS
Solving using DFS...
Error: Max Nodes limit(1000) Reached

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Tests to see if maxnodes is passed in
Comment: // Tests to see if maxnodes is passed in

Using Command: solve DFS 10000
Solving using DFS...
Error: Max Nodes limit(10000) Reached

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Sets solvable state for current DFS algorithm and runs DFS
Comment: // Sets solvable state for current DFS algorithm and runs DFS

Using Command: setState 1 0 2 3 4 5 6 7 8
Setting Puzzle State...
New Puzzle State:
1 0 2
3 4 5
6 7 8

Using Command: solve DFS
Solving using DFS...
Nodes expanded: 4
Solution Length: 1
Move Sequence:
Move Left

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Tests bad input for maxnodes
Comment: // Tests bad input for maxnodes

Using Command: solve DFS BFS
Error: Invalid Max Nodes Value. Using Default Value of 1000
Solving using DFS...
Nodes expanded: 4
Solution Length: 1
Move Sequence:
Move Left

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // -------------------------------------------------------------------------------------------------------------------------------------------
Comment: // -------------------------------------------------------------------------------------------------------------------------------------------

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Begin HW3 Tests
Comment: // Begin HW3 Tests

Using Command: // Sets puzzle state to demonstrate that heuristics will output 0 when puzzle is solved
Comment: // Sets puzzle state to demonstrate that heuristics will output 0 when puzzle is solved

Using Command: setState 0 1 2 3 4 5 6 7 8
Setting Puzzle State...
New Puzzle State:
0 1 2
3 4 5
6 7 8

Using Command: heuristic h1
Heuristic 1: 0

Using Command: heuristic h2
Heuristic 2: 0

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Sets puzzle state to demonstrate heuristics when they are different
Comment: // Sets puzzle state to demonstrate heuristics when they are different

Using Command: setState 1 0 5 3 2 4 6 7 8
Setting Puzzle State...
New Puzzle State:
1 0 5
3 2 4
6 7 8

Using Command: heuristic h1
Heuristic 1: 4

Using Command: heuristic h2
Heuristic 2: 5

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Tests A* when it is in the goal state already
Comment: // Tests A* when it is in the goal state already

Using Command: setState 0 1 2 3 4 5 6 7 8
Setting Puzzle State...
New Puzzle State:
0 1 2
3 4 5
6 7 8

Using Command: solve A* h1
Error: Invalid Max Nodes Value. Using Default Value of 1000
Solving using A* with Heuristic 1...
Nodes expanded: 1
Solution Length: 0
Move Sequence:

Using Command: solve A* h2
Error: Invalid Max Nodes Value. Using Default Value of 1000
Solving using A* with Heuristic 2...
Nodes expanded: 1
Solution Length: 0
Move Sequence:

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Tests A*
Comment: // Tests A*

Using Command: // There are loops that would happen without repeated state checking in this example
Comment: // There are loops that would happen without repeated state checking in this example

Using Command: scrambleState 60
Scrambling...
0 1 2
3 4 5
6 7 8
Moving Down...
Moving Up...
Moving Right...
Moving Left...
Moving Right...
Moving Right...
Moving Down...
Moving Down...
Moving Right...
Moving Up...
Moving Left...
Moving Left...
Moving Right...
Moving Right...
Moving Left...
Moving Right...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Up...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Down...
Moving Down...
Moving Up...
Moving Right...
Moving Down...
Moving Up...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Left...
Moving Up...
Moving Right...
Moving Down...
Moving Right...
Moving Right...
New Puzzle State:
1 4 2
7 6 5
3 8 0

Using Command: solve A* h1
Error: Invalid Max Nodes Value. Using Default Value of 1000
Solving using A* with Heuristic 1...
Nodes expanded: 383
Solution Length: 16
Move Sequence:
Move Up
Move Left
Move Down
Move Right
Move Up
Move Left
Move Down
Move Right
Move Up
Move Left
Move Left
Move Down
Move Right
Move Up
Move Up
Move Left

Using Command: solve A* h2
Error: Invalid Max Nodes Value. Using Default Value of 1000
Solving using A* with Heuristic 2...
Nodes expanded: 102
Solution Length: 16
Move Sequence:
Move Up
Move Left
Move Down
Move Right
Move Up
Move Left
Move Down
Move Right
Move Up
Move Left
Move Left
Move Down
Move Right
Move Up
Move Up
Move Left

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Shows A* when it hits max nodes
Comment: // Shows A* when it hits max nodes

Using Command: scrambleState 1000
Scrambling...
0 1 2
3 4 5
6 7 8
Moving Right...
Moving Left...
Moving Down...
Moving Down...
Moving Up...
Moving Right...
Moving Left...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Left...
Moving Down...
Moving Down...
Moving Up...
Moving Up...
Moving Right...
Moving Right...
Moving Down...
Moving Up...
Moving Down...
Moving Down...
Moving Up...
Moving Up...
Moving Down...
Moving Up...
Moving Left...
Moving Left...
Moving Down...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Down...
Moving Up...
Moving Up...
Moving Left...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Down...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Up...
Moving Right...
Moving Down...
Moving Left...
Moving Left...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Left...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Down...
Moving Up...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Right...
Moving Down...
Moving Left...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Up...
Moving Right...
Moving Left...
Moving Down...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Left...
Moving Up...
Moving Up...
Moving Down...
Moving Right...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Right...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Left...
Moving Up...
Moving Down...
Moving Right...
Moving Down...
Moving Up...
Moving Left...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Left...
Moving Left...
Moving Up...
Moving Right...
Moving Left...
Moving Down...
Moving Right...
Moving Down...
Moving Left...
Moving Up...
Moving Right...
Moving Right...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Left...
Moving Left...
Moving Up...
Moving Right...
Moving Down...
Moving Up...
Moving Down...
Moving Down...
Moving Up...
Moving Up...
Moving Down...
Moving Left...
Moving Down...
Moving Right...
Moving Up...
Moving Left...
Moving Up...
Moving Right...
Moving Right...
Moving Left...
Moving Down...
Moving Right...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Down...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Up...
Moving Left...
Moving Left...
Moving Right...
Moving Right...
Moving Down...
Moving Left...
Moving Up...
Moving Left...
Moving Right...
Moving Left...
Moving Down...
Moving Down...
Moving Up...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Up...
Moving Down...
Moving Right...
Moving Left...
Moving Left...
Moving Down...
Moving Right...
Moving Up...
Moving Down...
Moving Left...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Right...
Moving Left...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Left...
Moving Up...
Moving Right...
Moving Down...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Up...
Moving Left...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Down...
Moving Left...
Moving Right...
Moving Down...
Moving Right...
Moving Up...
Moving Left...
Moving Up...
Moving Right...
Moving Left...
Moving Down...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Up...
Moving Right...
Moving Down...
Moving Left...
Moving Right...
Moving Left...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Right...
Moving Left...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Right...
Moving Down...
Moving Down...
Moving Up...
Moving Left...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Left...
Moving Left...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Left...
Moving Left...
Moving Down...
Moving Right...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Up...
Moving Right...
Moving Down...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Left...
Moving Left...
Moving Right...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Down...
Moving Left...
Moving Down...
Moving Left...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Up...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Down...
Moving Up...
Moving Right...
Moving Down...
Moving Up...
Moving Left...
Moving Right...
Moving Up...
Moving Down...
Moving Left...
Moving Right...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Down...
Moving Up...
Moving Up...
Moving Left...
Moving Left...
Moving Down...
Moving Down...
Moving Up...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Down...
Moving Up...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Left...
Moving Up...
Moving Down...
Moving Right...
Moving Down...
Moving Up...
Moving Up...
Moving Left...
Moving Down...
Moving Right...
Moving Left...
Moving Down...
Moving Left...
Moving Up...
Moving Right...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Right...
Moving Right...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Down...
Moving Up...
Moving Left...
Moving Down...
Moving Left...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Right...
Moving Down...
Moving Left...
Moving Up...
Moving Right...
Moving Up...
Moving Right...
Moving Left...
Moving Down...
Moving Left...
Moving Up...
Moving Right...
Moving Down...
Moving Left...
Moving Up...
Moving Down...
Moving Right...
Moving Left...
Moving Down...
Moving Right...
Moving Up...
Moving Left...
Moving Up...
Moving Right...
Moving Right...
Moving Down...
Moving Down...
Moving Up...
Moving Left...
Moving Up...
Moving Down...
Moving Left...
Moving Down...
Moving Up...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Left...
Moving Right...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Right...
Moving Left...
Moving Up...
Moving Right...
Moving Down...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Left...
Moving Down...
Moving Left...
Moving Right...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Left...
Moving Left...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Down...
Moving Left...
Moving Down...
Moving Left...
Moving Right...
Moving Up...
Moving Right...
Moving Left...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Left...
Moving Right...
Moving Right...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Up...
Moving Left...
Moving Down...
Moving Down...
Moving Left...
Moving Up...
Moving Down...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Up...
Moving Down...
Moving Down...
Moving Up...
Moving Up...
Moving Right...
Moving Left...
Moving Right...
Moving Right...
Moving Left...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Left...
Moving Right...
Moving Right...
Moving Left...
Moving Left...
Moving Right...
Moving Left...
Moving Down...
Moving Down...
Moving Right...
Moving Left...
Moving Up...
Moving Right...
Moving Down...
Moving Left...
Moving Right...
Moving Left...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Right...
Moving Left...
Moving Up...
Moving Left...
Moving Right...
Moving Right...
Moving Left...
Moving Left...
Moving Right...
Moving Right...
Moving Down...
Moving Up...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Down...
Moving Down...
Moving Up...
Moving Down...
Moving Left...
Moving Up...
Moving Right...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Up...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Left...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Left...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Up...
Moving Up...
Moving Left...
Moving Down...
Moving Right...
Moving Left...
Moving Up...
Moving Right...
Moving Down...
Moving Left...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Right...
Moving Down...
Moving Right...
Moving Up...
Moving Down...
Moving Up...
Moving Up...
Moving Down...
Moving Left...
Moving Left...
Moving Up...
Moving Right...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Down...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Left...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Right...
Moving Down...
Moving Up...
Moving Left...
Moving Up...
Moving Down...
Moving Down...
Moving Left...
Moving Right...
Moving Left...
Moving Right...
Moving Left...
Moving Up...
Moving Up...
Moving Down...
Moving Right...
Moving Left...
Moving Right...
Moving Down...
Moving Right...
Moving Up...
Moving Up...
Moving Down...
Moving Left...
Moving Left...
Moving Down...
Moving Right...
Moving Left...
Moving Right...
Moving Up...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Left...
Moving Right...
Moving Left...
Moving Down...
Moving Right...
Moving Left...
Moving Up...
Moving Up...
Moving Right...
Moving Right...
Moving Down...
Moving Up...
Moving Down...
Moving Down...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Up...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Left...
Moving Right...
Moving Down...
Moving Up...
Moving Left...
Moving Left...
Moving Right...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Down...
Moving Down...
Moving Up...
Moving Right...
Moving Left...
Moving Left...
Moving Right...
Moving Up...
Moving Right...
Moving Down...
Moving Down...
Moving Up...
Moving Up...
Moving Left...
Moving Down...
Moving Down...
Moving Right...
Moving Right...
Moving Right...
Moving Up...
Moving Left...
Moving Up...
Moving Down...
Moving Left...
Moving Down...
Moving Up...
Moving Up...
Moving Right...
Moving Left...
Moving Right...
Moving Down...
Moving Left...
Moving Down...
Moving Right...
Moving Up...
Moving Down...
Moving Left...
Moving Up...
Moving Up...
Moving Down...
Moving Right...
Moving Up...
Moving Right...
Moving Left...
Moving Left...
Moving Right...
Moving Right...
Moving Down...
Moving Left...
Moving Up...
Moving Left...
Moving Down...
Moving Right...
Moving Down...
Moving Left...
Moving Right...
Moving Right...
Moving Up...
Moving Down...
Moving Up...
Moving Left...
Moving Right...
Moving Down...
Moving Up...
Moving Up...
Moving Left...
Moving Right...
Moving Down...
Moving Down...
Moving Up...
Moving Left...
Moving Left...
Moving Down...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Up...
Moving Down...
Moving Up...
Moving Right...
Moving Down...
Moving Up...
Moving Right...
Moving Left...
Moving Up...
Moving Left...
Moving Down...
Moving Right...
Moving Right...
Moving Left...
Moving Down...
Moving Up...
Moving Right...
Moving Up...
Moving Left...
Moving Down...
Moving Down...
Moving Up...
Moving Right...
Moving Down...
Moving Up...
Moving Up...
Moving Left...
Moving Down...
Moving Down...
Moving Up...
Moving Right...
Moving Up...
Moving Down...
Moving Left...
New Puzzle State:
2 7 5
6 0 3
8 4 1

Using Command: solve A* h1
Error: Invalid Max Nodes Value. Using Default Value of 1000
Solving using A* with Heuristic 1...
Error: Max Nodes limit(1000) Reached

Using Command: solve A* h2
Error: Invalid Max Nodes Value. Using Default Value of 1000
Solving using A* with Heuristic 2...
Error: Max Nodes limit(1000) Reached

Using Command: //
Comment: //

Using Command: //
Comment: //

Using Command: // Tests invalid commands
Comment: // Tests invalid commands

Using Command: sdf
Error: Invalid Command sdf

Using Command: solve
Error: Invalid Solve Command: solve

Using Command: solve A*
Error: Invalid Heuristic Value: solve A*

Using Command: solve A* sdfds
Error: Invalid Max Nodes Value. Using Default Value of 1000
Error: Invalid Heuristic Value: solve A* sdfds

Using Command: heuristic sdfdsf
Error: Invalid Heuristic Command: heuristic sdfdsf

